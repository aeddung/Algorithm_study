"""
식량창고가 일직선상에 존재하며, 서로 인접한 식량창고를 털 경우 걸린다.
걸리지 않고 식량창고를 털되(최소한 한 칸 이상 떨어진 식량창고를 노려야 함), 가장 많은 식량을 털었을 때 값을 구해라
식량창고 개수: N / 각 식량창고에 저장된 식량 개수: K
3 <= N <= 100, 0 <= K <= 1000
"""
n = int(input())
k = list(map(int, input().split()))

# DT 테이블 초기화
# d[1] = 첫 번째 얻은 식량 / d[2] = 두 번째 얻은 식량 / d[3] = 세 번째 얻은 식량(누적) / ...
d = [0] * n

d[0] = k[0]
d[1] = max(k[0], k[1])
# bottom-up 다이나믹 프로그래밍
for i in range(2, n):
  d[i] = max(d[i-1], d[i-2] + k[i])

print(d[n-1])
